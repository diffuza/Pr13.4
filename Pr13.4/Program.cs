class Program
{
    static void Main(string[] args)
    {

        int[] i = {
            4,
            3,
            7,
            23,
            6,
            8,
            123,
            6,
            32
        }; // объявление массива
        QuickSort(i, 0, 8); // применение метода QouickSort
        foreach (int w in i) // применение оператора foreach, которая перечисляет элементы коллекции и выполняет тело для каждого элемента коллекции.
        {
            Console.WriteLine(w); // вывод на экран указанного значения
        }

        Console.ReadKey();

    }

    private static int[] QuickSort(int[] a, int i, int j)
    {
        if (i < j) // применение операторая if , который выбирает оператор, который нужно выполнить, на основе значения логического выражения.
        {
            int q = Partition(a, i, j); // объявление переменной класса partition
            a = QuickSort(a, i, q); // присвоение лок.переменной a  типа сортировки QuickSort с указанными данными
            a = QuickSort(a, q + 1, j); // присвоение лок.переменной a  типа сортировки QuickSort с указанными данными
        }
        return a; // применение оператора return, который завершает выполнение метода, в котором он присутствует, и возвращает управление вызывавшему методу.
    }

    private static int Partition(int[] a, int p, int r)
    {
        int x = a[p]; // присвоение целого типа лок.переменной x значения лок.переменной a зависящей p
        int i = p - 1; // присвоение целого типа лок.переменной i значения p-1
        int j = r + 1; // присвоение целого типа лок.переменной j значения r+1
        while (true) // применение оператора while, который условно выполняет тело ноль или более раз.
        {
            do
            {
                j--; // уменьшение значения переменной
            }
            while (a[j] > x); // применение оператора while, который условно выполняет тело ноль или более раз.
            do
            {
                i++; // увеличение значения переменной
            }
            while (a[i] < x); // применение оператора while, который условно выполняет тело ноль или более раз.
            if (i < j) // применение операторая if , который выбирает оператор, который нужно выполнить, на основе значения логического выражения.
            {
                int tmp = a[i]; // присвоение целого типа лок.переменной tmp значения лок.переменной a зависящей i
                a[i] = a[j]; // операция присвоение
                a[j] = tmp; // присвоение целого типа лок.переменной tmp
            }
            else
            {
                return j; // применение оператора return, который завершает выполнение метода, в котором он присутствует, и возвращает управление вызывавшему методу.
            }
        }
    }
}
